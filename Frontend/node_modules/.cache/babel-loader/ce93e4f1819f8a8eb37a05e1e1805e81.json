{"ast":null,"code":"var _jsxFileName = \"D:\\\\S3Funny\\\\enigma-parking\\\\src\\\\Appointments\\\\EditAppointment.js\";\nimport React, { Component } from 'react';\nimport AppNav from '../AppNav';\nimport '../App.css';\nimport { Container, Form, FormGroup, Input, Label, Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport Datetime from \"react-datetime\";\nimport Autosuggest from 'react-autosuggest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet guests;\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : guests.filter(guest => guest.firstName.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nconst getSuggestionValue = suggestion => suggestion.firstName + \" \" + suggestion.lastName;\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"span\", {\n  id: suggestion.accountId,\n  children: [suggestion.firstName, \" \", suggestion.lastName]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 5\n}, this);\n\nclass EditAppointment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSuggestionChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (event, {\n      suggestion,\n      suggestionValue,\n      index,\n      method\n    }) => {\n      event.preventDefault();\n      let appointment = { ...this.state.appointment\n      };\n      appointment.guestId = suggestion.accountId;\n      this.setState({\n        appointment\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      appointment: [],\n      showGuestError: false,\n      showEmailError: false,\n      showStartDateError: false,\n      showEndDateError: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleStartDatetimeChange = this.handleStartDatetimeChange.bind(this);\n    this.handleEndDatetimeChange = this.handleEndDatetimeChange.bind(this);\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.formValidation()) {\n      const appointment = this.state.appointment;\n      await fetch('/appointment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(appointment)\n      }).then(response => {\n        if (response.ok) {\n          this.props.history.push(\"/calendar\");\n        }\n      });\n    }\n  }\n\n  formValidation() {\n    let validated = true;\n    this.setState({\n      showGuestError: false,\n      showEmailError: false,\n      showStartDateError: false,\n      showEndDateError: false\n    });\n    const appointment = this.state.appointment;\n\n    if (appointment.guestId === '') {\n      this.setState({\n        showGuestError: true\n      });\n      validated = false;\n    }\n\n    if (appointment.employeeEmail === '') {\n      this.setState({\n        showEmailError: true\n      });\n      validated = false;\n    }\n\n    if (appointment.appointmentStartDate === '') {\n      this.setState({\n        showStartDateError: true\n      });\n      validated = false;\n    }\n\n    if (appointment.appointmentEndDate === '') {\n      this.setState({\n        ShowEndDateError: true\n      });\n      validated = false;\n    }\n\n    return validated;\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let appointment = { ...this.state.appointment\n    };\n    appointment[name] = value;\n    this.setState({\n      appointment\n    });\n  }\n\n  handleStartDatetimeChange(date) {\n    let appointment = { ...this.state.appointment\n    };\n    appointment.appointmentStartDate = date.toDate();\n    this.setState({\n      appointment\n    });\n  }\n\n  handleEndDatetimeChange(date) {\n    let appointment = { ...this.state.appointment\n    };\n    appointment.appointmentEndDate = date.toDate();\n    this.setState({\n      appointment\n    });\n  }\n\n  async componentDidMount() {\n    let response = await fetch('/account');\n    guests = await response.json();\n    response = await fetch(`/appointment/${this.props.match.params.id}`);\n    const body = await response.json();\n    let guest = guests.find(a => a.accountId === body.guestId);\n    let value = '';\n\n    if (guest) {\n      value = guest.firstName + \" \" + guest.lastName;\n    }\n\n    this.setState({\n      value: value,\n      appointment: body,\n      isLoading: false\n    });\n  }\n\n  render() {\n    const {\n      value,\n      suggestions,\n      appointment,\n      showGuestError,\n      showEmailError,\n      showStartDateError,\n      showEndDateError\n    } = this.state;\n    const inputProps = {\n      value,\n      onChange: this.handleSuggestionChange\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AppNav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mt-5\",\n        children: \"Edit Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              className: \"mt-5\",\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: this.handleSubmit,\n                children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    for: \"guest\",\n                    children: \"Guest\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Autosuggest, {\n                    name: \"guest\",\n                    id: \"guest\",\n                    suggestions: suggestions,\n                    onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n                    onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n                    getSuggestionValue: getSuggestionValue,\n                    renderSuggestion: renderSuggestion,\n                    onSuggestionSelected: this.onSuggestionSelected,\n                    inputProps: inputProps\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    style: {\n                      color: 'red'\n                    },\n                    children: showGuestError ? 'Missing Guest, make sure to select one from the suggestions' : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    for: \"employeeEmail\",\n                    children: \"Email of Employee\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"email\",\n                    name: \"employeeEmail\",\n                    id: \"employeeEmail\",\n                    value: appointment.employeeEmail,\n                    onChange: this.handleInputChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    style: {\n                      color: 'red'\n                    },\n                    children: showEmailError ? 'Missing Email' : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    for: \"appointmentStartDate\",\n                    children: \"Appointment Start Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Datetime, {\n                    type: \"text\",\n                    name: \"appointmentStartDate\",\n                    id: \"appointmentStartDate\",\n                    value: new Date(appointment.appointmentStartDate),\n                    inputProps: {\n                      readOnly: true\n                    },\n                    locale: 'nl',\n                    timeFormat: \"HH:mm\",\n                    onChange: this.handleStartDatetimeChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    style: {\n                      color: 'red'\n                    },\n                    children: showStartDateError ? 'Missing Start Date' : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    for: \"appointmentEndDate\",\n                    children: \"Appointment End Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Datetime, {\n                    type: \"text\",\n                    name: \"appointmentEndDate\",\n                    id: \"appointmentEndDate\",\n                    value: new Date(appointment.appointmentEndDate),\n                    inputProps: {\n                      readOnly: true\n                    },\n                    locale: 'nl',\n                    timeFormat: \"HH:mm\",\n                    onChange: this.handleEndDatetimeChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    style: {\n                      color: 'red'\n                    },\n                    children: showEndDateError ? 'Missing End Date' : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    color: \"primary\",\n                    type: \"submit\",\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 41\n                  }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n                    color: \"secondary\",\n                    tag: Link,\n                    to: \"/home\",\n                    children: \"Cancel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default EditAppointment;","map":{"version":3,"sources":["D:/S3Funny/enigma-parking/src/Appointments/EditAppointment.js"],"names":["React","Component","AppNav","Container","Form","FormGroup","Input","Label","Button","Link","Datetime","Autosuggest","guests","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","guest","firstName","slice","getSuggestionValue","suggestion","lastName","renderSuggestion","accountId","EditAppointment","constructor","props","handleSuggestionChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","index","method","preventDefault","appointment","state","guestId","showGuestError","showEmailError","showStartDateError","showEndDateError","handleSubmit","bind","handleInputChange","handleStartDatetimeChange","handleEndDatetimeChange","formValidation","fetch","headers","body","JSON","stringify","then","response","ok","history","push","validated","employeeEmail","appointmentStartDate","appointmentEndDate","ShowEndDateError","target","name","date","toDate","componentDidMount","json","match","params","id","find","a","isLoading","render","inputProps","onChange","color","Date","readOnly"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport AppNav from '../AppNav';\r\nimport '../App.css';\r\nimport {Container, Form, FormGroup, Input, Label, Button} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport Datetime from \"react-datetime\";\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nlet guests;\r\n\r\nconst getSuggestions = value => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    return inputLength === 0 ? [] : guests.filter(guest =>\r\n        guest.firstName.toLowerCase().slice(0, inputLength) === inputValue\r\n    );\r\n};\r\n\r\nconst getSuggestionValue = suggestion => suggestion.firstName + \" \" + suggestion.lastName;\r\n\r\nconst renderSuggestion = suggestion => (\r\n    <span id={suggestion.accountId}>\r\n        {suggestion.firstName} {suggestion.lastName}\r\n    </span>\r\n);\r\n\r\nclass EditAppointment extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: '',\r\n            suggestions: [],\r\n            appointment: [],\r\n            showGuestError: false,\r\n            showEmailError: false,\r\n            showStartDateError: false,\r\n            showEndDateError: false\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleStartDatetimeChange = this.handleStartDatetimeChange.bind(this);\r\n        this.handleEndDatetimeChange = this.handleEndDatetimeChange.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (this.formValidation()) {\r\n            const appointment = this.state.appointment;\r\n            await fetch('/appointment', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(appointment),\r\n            }).then((response) => {\r\n                if (response.ok) {\r\n                    this.props.history.push(\"/calendar\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    formValidation(){\r\n        let validated = true;\r\n\r\n        this.setState({\r\n            showGuestError: false,\r\n            showEmailError: false,\r\n            showStartDateError: false,\r\n            showEndDateError: false\r\n        });\r\n\r\n        const appointment = this.state.appointment;\r\n        if ( appointment.guestId === '' ){\r\n            this.setState({showGuestError: true});\r\n            validated = false;\r\n        }\r\n        if ( appointment.employeeEmail === '' ){\r\n            this.setState({showEmailError: true});\r\n            validated = false;\r\n        }\r\n        if ( appointment.appointmentStartDate === '' ){\r\n            this.setState({showStartDateError: true});\r\n            validated = false;\r\n        }\r\n        if ( appointment.appointmentEndDate === '' ){\r\n            this.setState({ShowEndDateError: true});\r\n            validated = false;\r\n        }\r\n        return validated;\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let appointment = {...this.state.appointment};\r\n        appointment[name] = value;\r\n        this.setState({appointment});\r\n    }\r\n\r\n    handleStartDatetimeChange(date) {\r\n        let appointment = {...this.state.appointment};\r\n        appointment.appointmentStartDate = date.toDate();\r\n        this.setState({appointment});\r\n    }\r\n\r\n    handleEndDatetimeChange(date) {\r\n        let appointment = {...this.state.appointment};\r\n        appointment.appointmentEndDate = date.toDate();\r\n        this.setState({appointment});\r\n    }\r\n\r\n    handleSuggestionChange = (event, {newValue}) => {\r\n        this.setState({\r\n            value: newValue\r\n        });\r\n    };\r\n\r\n    async componentDidMount() {\r\n        let response = await fetch('/account');\r\n        guests = await response.json();\r\n\r\n        response = await fetch(`/appointment/${this.props.match.params.id}`);\r\n        const body = await response.json();\r\n        let guest = guests.find(a => a.accountId === body.guestId);\r\n        let value = '';\r\n        if (guest) {\r\n             value = guest.firstName + \" \" + guest.lastName;\r\n        }\r\n        this.setState({value: value, appointment: body, isLoading: false});\r\n    }\r\n\r\n    onSuggestionsFetchRequested = ({value}) => {\r\n        this.setState({\r\n            suggestions: getSuggestions(value)\r\n        });\r\n    };\r\n\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n    onSuggestionSelected = (event, {suggestion, suggestionValue, index, method}) => {\r\n        event.preventDefault();\r\n        let appointment = {...this.state.appointment};\r\n        appointment.guestId = suggestion.accountId;\r\n        this.setState({appointment});\r\n    };\r\n\r\n    render() {\r\n        const {value, suggestions, appointment, showGuestError, showEmailError, showStartDateError, showEndDateError} = this.state;\r\n\r\n        const inputProps = {\r\n            value,\r\n            onChange: this.handleSuggestionChange\r\n        };\r\n\r\n        return (\r\n            <div><AppNav/>\r\n                <h2 className=\"text-center mt-5\">Edit Appointment</h2>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\"/>\r\n                        <div className=\"col\">\r\n                            <Container className=\"mt-5\">\r\n                                <Form onSubmit={this.handleSubmit}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"guest\">Guest</Label>\r\n                                        <Autosuggest\r\n                                            name=\"guest\" id=\"guest\"\r\n                                            suggestions={suggestions}\r\n                                            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                                            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                                            getSuggestionValue={getSuggestionValue}\r\n                                            renderSuggestion={renderSuggestion}\r\n                                            onSuggestionSelected={this.onSuggestionSelected}\r\n                                            inputProps={inputProps}\r\n                                        />\r\n                                        <p style={{color: 'red'}}>{showGuestError ? 'Missing Guest, make sure to select one from the suggestions' : ''}</p>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"employeeEmail\">Email of Employee</Label>\r\n                                        <Input type=\"email\" name=\"employeeEmail\" id=\"employeeEmail\" value={appointment.employeeEmail}\r\n                                               onChange={this.handleInputChange}/>\r\n                                        <p style={{color: 'red'}}>{showEmailError ? 'Missing Email' : ''}</p>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"appointmentStartDate\">Appointment Start Date</Label>\r\n                                        <Datetime type=\"text\" name=\"appointmentStartDate\" id=\"appointmentStartDate\" value={new Date(appointment.appointmentStartDate)}\r\n                                                  inputProps={{readOnly: true}}\r\n                                                  locale={'nl'}\r\n                                                  timeFormat=\"HH:mm\"\r\n                                                  onChange={this.handleStartDatetimeChange}/>\r\n                                        <p style={{color: 'red'}}>{showStartDateError ? 'Missing Start Date' : ''}</p>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"appointmentEndDate\">Appointment End Date</Label>\r\n                                        <Datetime type=\"text\" name=\"appointmentEndDate\" id=\"appointmentEndDate\" value={new Date(appointment.appointmentEndDate)}\r\n                                                  inputProps={{readOnly: true}}\r\n                                                  locale={'nl'}\r\n                                                  timeFormat=\"HH:mm\"\r\n                                                  onChange={this.handleEndDatetimeChange}/>\r\n                                        <p style={{color: 'red'}}>{showEndDateError ? 'Missing End Date' : ''}</p>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                                        <Button color=\"secondary\" tag={Link} to=\"/home\">Cancel</Button>\r\n                                    </FormGroup>\r\n                                </Form>\r\n                            </Container>\r\n                        </div>\r\n                        <div className=\"col\"/>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default EditAppointment;"]},"metadata":{},"sourceType":"module"}